#!/usr/bin/env python
import sys
import subprocess
from subprocess import PIPE

import logging
import numpy as np
import chainer as ch
import cupy as cp
from ideep4py import mdarray

LOGGER = logging.getLogger(__name__)
logging.basicConfig(stream=sys.stdout, level=logging.DEBUG)

def main():
    check_chainer()

def check_chainer():
    try:
        process = subprocess.Popen(["bash", "-c", "nvidia-smi"], stdout=PIPE)
        process.communicate()
        ret_val = process.wait()
        is_gpu = not ret_val

        if is_gpu:
            # Create an array using cupy and calculate its l2 norm
            x_gpu = cp.array([1, 2, 3])
            l2_gpu = cp.linalg.norm(x_gpu)

            assert isinstance(l2_gpu, cp.core.core.ndarray), "Error: GPU sanity test for Chainer failed."
        else:
            # Create an array using numpy and check that it uses Intel iDeep
            x_array = np.ones((3, 3), dtype='f')
            with ch.using_config('use_ideep', 'auto'):
                y_transform = ch.functions.relu(x_array)

            assert isinstance(y_transform.data, mdarray), "Error: CPU sanity test for Chainer failed."

    except Exception as excp:
        LOGGER.debug("Error: check_chainer test failed.")
        LOGGER.debug("Exception: {}".format(excp))
        raise

if __name__ == "__main__":
    try:
        sys.exit(main())
    except KeyboardInterrupt:
        pass
